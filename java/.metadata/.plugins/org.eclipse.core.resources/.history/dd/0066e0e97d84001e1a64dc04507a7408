package renderables;

import com.bstn.zplviewer.graphics.Renderer;
import com.bstn.zplviewer.zpl.constants.ZColor;
import com.bstn.zplviewer.zpl.constants.ZFont;
import com.bstn.zplviewer.zpl.constants.ZJustification;
import com.bstn.zplviewer.zpl.constants.ZOrientation;

import java.lang.reflect.Field;

public class Text extends Renderable {
	private String data;
	private ZFont font;

	public Text(float x, float y, float width, float height, ZColor color, ZOrientation orientation,
			ZJustification justification, String data, ZFont font) {
		super(x, y, width, height, color, orientation, justification);
		this.data = data;
		this.font = font;
	}

	@Override
	public void render(Renderer renderer) {
		renderer.drawText(this);
	}

	 @Override
	    public String toString() {
	        StringBuilder sb = new StringBuilder();

	        // Get the fields from the superclass (Renderable) and include them first
	        Field[] renderableFields = Renderable.class.getDeclaredFields();
	        for (Field field : renderableFields) {
	            field.setAccessible(true);
	            try {
	                sb.append(field.getName()).append("=").append(field.get(this)).append(", ");
	            } catch (IllegalAccessException e) {
	                e.printStackTrace(); // Handle the exception according to your needs
	            }
	        }

	        // Include the fields from the Text class
	        sb.append("Text [data=").append(data).append(", font=").append(font).append("]");

	        return sb.toString();
	    }

	public String getData() {
		return data;
	}

	public void setData(String data) {
		this.data = data;
	}

	public ZFont getFont() {
		return font;
	}

	public void setFont(ZFont font) {
		this.font = font;
	}
}
